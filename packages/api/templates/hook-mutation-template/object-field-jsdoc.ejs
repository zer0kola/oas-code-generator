<%
const { field, utils } = it;
const { formatDescription, require, _ } = utils;

const { field, utils } = it;
const { formatDescription, require, _ } = utils;

// Helper function for safe JSON stringification
const safeStringify = (obj) => {
  try {
    return JSON.stringify(obj);
  } catch (e) {
    return '[Complex Object]';
  }
};

const comments = _.uniq(
    _.compact([
        field.title,
        field.description,
        field.deprecated && ` * @deprecated`,
        _.has(field, 'format') && `@format ${field.format}`,
        _.has(field, 'minimum') && `@min ${field.minimum}`,
        _.has(field, 'maximum') && `@max ${field.maximum}`,
        _.has(field, 'pattern') && `@pattern ${field.pattern}`,
        !_.isUndefined(field.example) &&
        `@example ${_.isObject(field.example) ? safeStringify(field.example) : field.example}`,
    ]).reduce((acc, comment) => [...acc, ...comment.split(/\n/g)], []),
);
%>
<% if (comments.length === 1) { %>
  /** <%~ comments[0] %> */
<% } else if (comments.length) { %>
  /**
  <% comments.forEach(comment => { %>
   * <%~ comment %>

  <% }) %>
   */
<% } %>
