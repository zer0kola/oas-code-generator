<%
// 기본 설정 및 유틸리티
const { utils, route, config } = it;
const { _, getInlineParseContent } = utils;
const { parameters, path, method, payload, query, security, requestParams } = route.request;
const { type, errorType } = route.response;
const { HTTP_CLIENT, RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;

// 상수 정의
const ContentType = {
    JSON: "ContentType.Json",
    URL_ENCODED: "ContentType.UrlEncoded",
    FORM_DATA: "ContentType.FormData",
    TEXT: "ContentType.Text"
};

const ResponseFormat = {
    JSON: "json",
    IMAGE: "blob",
    FORM_DATA: "formData"
};

const CONTENT_TYPE_MAPPING = {
    request: ContentType,
    response: {
        JSON: ResponseFormat.JSON,
        IMAGE: ResponseFormat.IMAGE,
        FORM_DATA: config.httpClientType === HTTP_CLIENT.FETCH ? ResponseFormat.FORM_DATA : "document"
    }
};

// 파라미터 분류
const pathParameters = parameters.filter(param => param.in === 'path');
const formDataParameters = parameters.filter(param => param.in === 'formData');
const queryParameters = parameters.filter(param => param.in === 'query');

// 유틸리티 함수
const formatParameter = (param) => {
    const paramType = param.type === 'array' ? `${param.items.type}[]` : param.type;
    return `${param.name}${param.required ? '' : '?'}: ${paramType}`;
};

const generateApiParams = () => {
    const properties = [];

    // Path 파라미터 처리
    if (path.includes('{')) {
        const pathParams = path.match(/{([^}]+)}/g) || [];
        pathParams.forEach(param => {
            const paramName = param.replace(/[{}]/g, '');
            const parameter = parameters.find(p => p.name === paramName);
            if (parameter) {
                properties.push(`${paramName}: ${parameter.type === 'integer' ? 'number' : parameter.type}`);
            }
        });
    }

    // Payload 처리
    if (payload) {
        const payloadContent = payload.type;

        // 참조 타입인 경우 (예: User)
        if (payloadContent.includes('components.schemas.')) {
            const typeName = payloadContent.split('.').pop();
            properties.push(properties.length > 0 ? `user: ${typeName}` : typeName);
        }
        // 일반 객체 타입인 경우
        else if (payloadContent.startsWith('{') && payloadContent.endsWith('}')) {
            const props = payloadContent
                .replace(/^{\s*|\s*}$/g, '')
                .trim()
                .split(';')
                .map(prop => prop.trim())
                .filter(Boolean)
                .map(prop => {
                    if (prop.includes('components.schemas.')) {
                        const [name, type] = prop.split(':').map(p => p.trim());
                        const typeName = type.split('.').pop();
                        return `${name.toLowerCase()}: ${typeName}`;
                    }
                    return prop;
                });

            properties.push(...props);
        }
        // 배열 타입인 경우
        else if (payloadContent.includes('[]')) {
            const arrayType = payloadContent.replace(/\((.*?)\)\[\]/g, '$1[]');
            if (arrayType.includes('components.schemas.')) {
                const typeName = arrayType.split('.').pop();
                properties.push(`users: ${typeName}[]`);
            } else {
                properties.push(arrayType);
            }
        }
        // 단순 타입인 경우 (예: 'User')
        else {
            const isSchemaType = /^[A-Z]/.test(payloadContent);
            if (isSchemaType) {
                properties.push(properties.length > 0 ? `user: ${payloadContent}` : payloadContent);
            } else {
                properties.push(payloadContent);
            }
        }
    }

    // Query 및 FormData 파라미터 처리
    [...queryParameters, ...formDataParameters].forEach(param => {
        properties.push(formatParameter(param));
    });

    if (properties.length === 0) return '';
    if (properties.length === 1 && !properties[0].includes(':')) {
        return `payload: ${properties[0]}`;
    }
    return `payload: {\n    ${properties.join(';\n    ')}\n  }`;
};

const generateRequestBody = () => {
    if (!formDataParameters.length) return payload ? 'payload' : 'undefined';

    return `
    const formData = new FormData();
    ${formDataParameters
        .map(param => `if (payload.${param.name}) formData.append('${param.name}', payload.${param.name});`)
        .join('\n    ')}
    return formData;`;
};

const generateRequestOptions = () => {
    if (formDataParameters.length) return generateRequestBody();
    if (queryParameters.length) return `{ params: { ${queryParameters.map(p => p.name).join(', ')} } }`;
    return ['put', 'post'].includes(route.raw.method) ? 'payload' : 'undefined';
};

const processPath = (originalPath) => {
    return originalPath.replace(/(?:\$\{(\w+)\}|{(\w+)})/g, (_, p1, p2) => `\${payload.${p1 || p2}}`);
};

// 라우트 문서화
const routeDocs = includeFile("./route-docs", { config, route, utils });

// API 반환 타입
const apiReturnType = route.raw.method === 'get' ? type : null;
const apiParams = generateApiParams();
%>
/**
<%~ routeDocs.description %>

<%~ routeDocs.lines %>
 */

async <%~ route.routeName.usage %><%~apiReturnType?`<T = ${apiReturnType}>`:``%>(<%~ apiParams %>) {
    const method = '<%~ route.raw.method %>';
    const endpoint = `<%~ processPath(path) %>`;
    const options = <%~ generateRequestOptions() %>;

    return await apiInstance[method]<%~apiReturnType? `<T>`:``%>(endpoint, options);
},

